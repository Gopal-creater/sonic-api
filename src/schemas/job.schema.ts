import {
  attribute,
  hashKey,
  autoGeneratedHashKey,
  rangeKey,
  table,
} from '@aws/dynamodb-data-mapper-annotations';
import { IsNotEmpty,IsArray } from 'class-validator';
import { ApiProperty } from '@nestjs/swagger';

/**
 * Info About Dynamodb data mapper
 * https://github.com/awslabs/dynamodb-data-mapper-js
 * QueryOptions==> https://github.com/awslabs/dynamodb-data-mapper-js/blob/c504011/packages/dynamodb-data-mapper/src/namedParameters/QueryOptions.ts#L19
 * DynamoDb-Expression ==> https://awslabs.github.io/dynamodb-data-mapper-js/packages/dynamodb-expressions/#attribute-paths
 * 
 */

@table('SonicJob-New-Schema')
export class Job {
  constructor(data?: Partial<Job>) {
    Object.assign(this, data);
  }

  @ApiProperty()
  @autoGeneratedHashKey()
  id: string;

  @IsNotEmpty()
  @ApiProperty()
  @attribute()
  name: string;

  @IsNotEmpty()
  @ApiProperty()
  @attribute({
    indexKeyConfigurations: {
      ownerIndex: 'HASH',
    },
  })
  owner: string;

  @IsNotEmpty()
  @ApiProperty()
  @attribute()
  licenseId: string;

  @ApiProperty()
  @attribute()
  reservedLicenceCount: number;

  @ApiProperty()
  @attribute()
  usedLicenceCount: number;

  @ApiProperty()
  @attribute({ defaultProvider: () => false })
  isComplete?: boolean;

  @ApiProperty()
  @attribute({ defaultProvider: () => new Date() })
  createdAt: Date;

  @ApiProperty()
  @attribute()
  completedAt: Date;

  @IsNotEmpty()
  @IsArray()
  @ApiProperty()
  @attribute()
  jobDetails: { [key: string]: any }[];
}
