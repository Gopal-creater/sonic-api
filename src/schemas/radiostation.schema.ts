// import { embed } from '@aws/dynamodb-data-mapper';
// import {
//   attribute,
//   autoGeneratedHashKey,
//   rangeKey,
//   table,
// } from '@aws/dynamodb-data-mapper-annotations';
// import { ApiProperty } from '@nestjs/swagger';

// class Credential {
//   @ApiProperty()
//   @attribute()
//   username: string;

//   @ApiProperty()
//   @attribute()
//   password: string;
// }

// @table('RadioStation')
// export class RadioStation {
//   constructor(data?: Partial<RadioStation>) {
//     Object.assign(this, data);
//   }

//   @ApiProperty()
//   @autoGeneratedHashKey()
//   id?: string;

//   @ApiProperty()
//   @attribute()
//   name: string;

//   @ApiProperty()
//   @attribute()
//   streamingUrl: string;

//   @ApiProperty()
//   @attribute()
//   website: string;

//   @ApiProperty()
//   @attribute()
//   logo: string;

//   @ApiProperty()
//   @attribute({memberType: embed(Credential)})
//   credential: Credential;
  
//   @ApiProperty()
//   @attribute({
//     indexKeyConfigurations: {
//       ownerIndex: 'HASH',
//     },
//   })
//   owner: string;

//   @ApiProperty()
//   @rangeKey({ defaultProvider: () => new Date() })
//   createdAt: Date;

//   @ApiProperty()
//   @attribute()
//   startedAt: Date;

//   @ApiProperty()
//   @attribute()
//   stopAt: Date;

//   @ApiProperty()
//   @attribute({ defaultProvider: () => false })
//   isStreamStarted: boolean;

//   @ApiProperty()
//   @attribute()
//   notes: { [key: string]: any };
// }

import { Prop, Schema, SchemaFactory, } from '@nestjs/mongoose';
import { Document,Schema as MogSchema} from 'mongoose';
import { ApiProperty } from '@nestjs/swagger';

export const RadioStationSchemaName="RadioStation"

@Schema()
export class Credential {
  @ApiProperty()
  username: string;

  @ApiProperty()
  password: string;
}

@Schema({ timestamps: true,collection:RadioStationSchemaName})
export class RadioStation extends Document {
  constructor(data?: Partial<RadioStation>) {
    super()
    Object.assign(this, data);
    
  }

  @ApiProperty()
  @Prop({
    required:true
  })
  name: string;

  @ApiProperty()
  @Prop()
  streamingUrl: string;

  @ApiProperty()
  @Prop()
  website: string;

  @ApiProperty()
  @Prop()
  logo: string;

  @ApiProperty()
  @Prop({type:Credential})
  credential: Credential;

  @ApiProperty()
  @Prop()
  owner: string;

  @ApiProperty()
  @Prop({type:Date})
  startedAt: Date;

  @ApiProperty()
  @Prop({type:Date})
  stopAt: Date;

  @ApiProperty()
  @Prop({ default: false })
  isStreamStarted: boolean;

  @ApiProperty()
  @Prop()
  notes: string;

  @ApiProperty()
  @Prop()
  metaData: Map<string, any>;  
}

export const RadioStationSchema = SchemaFactory.createForClass(RadioStation);
